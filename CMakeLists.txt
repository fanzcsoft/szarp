cmake_minimum_required(VERSION 3.5)

project(szarp)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_REQUIRED_LIBRARIES m)
set(CMAKE_REQUIRED_INCLUDES math.h)

set(PACKAGE "szarp0")
set(PACKAGE_BUGREPORT "devs@newterm.pl")
set(PACKAGE_NAME "szarp2")
set(PACKAGE_STRING "szarp3")
set(PACKAGE_TARNAME "szarp4")
set(PACKAGE_VERSION "szarp5")
set(PACKAGE_URL "https://github.com/newterm/szarp")
set(VERSION "szarp6")

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS(alphasort HAVE_ALPHASORT)
CHECK_FUNCTION_EXISTS(asprintf HAVE_ASPRINTF)
CHECK_FUNCTION_EXISTS(gmtime_r HAVE_GMTIME_R)
CHECK_FUNCTION_EXISTS(localtime_r HAVE_LOCALTIME_R)
CHECK_FUNCTION_EXISTS(pow10 HAVE_POW10)
CHECK_FUNCTION_EXISTS(scandir HAVE_SCANDIR)
CHECK_FUNCTION_EXISTS(timegm HAVE_TIMEGM)

include(CheckIncludeFile)
CHECK_INCLUDE_FILE("libgen.h" HAVE_LIBGEN_H)
CHECK_INCLUDE_FILE("stdlib.h" HAVE_STDLIB_H)
CHECK_INCLUDE_FILE("string.h" HAVE_STRING_H)
CHECK_INCLUDE_FILE("sys/stat.h" HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE("sys/types.h" HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE("unistd.h" HAVE_UNISTD_H)
CHECK_INCLUDE_FILE("xmlrpc-epi/xmlrpc.h" HAVE_XMLRPC_EPI_H)

find_package(Boost COMPONENTS system thread program_options regex filesystem python locale signals REQUIRED)
find_package(Protobuf REQUIRED)
find_package(FLEX REQUIRED)
if(${FLEX_VERSION} VERSION_GREATER "2.5.8")
  set(HAVE_YYLEX_DESTROY true)
endif()
find_package(OpenSSL REQUIRED)
find_package(ZeroMQ REQUIRED)
find_package(PythonLibs REQUIRED)
find_package(LibXml2 REQUIRED)
option(USE_XMLREADER "Use xmlTextReader instead of legacy XML DOM" ON)
find_package(Lua REQUIRED)
if(NOT ${LUA_FOUND})
  set(NO_LUA true)
endif()
option(LUA_PARAM_OPTIMISE "Build with Lua param optimiser" ON)
find_package(FTGL REQUIRED)
if(${FTGL_FOUND})
  set(HAVE_FTGL true)
endif()
find_package(wxWidgets COMPONENTS gl base gtk REQUIRED)
if(${wxWidgets_FOUND})
  set(HAVE_GLCANVAS true)
endif()
find_package(CGAL QUIET)
if(NOT ${CGAL_FOUND})
  set(NO_CGAL true)
endif()

find_program(NOSETESTS_PATH nosetests)

include(TestSignalType)
include(TestBigEndian)
TEST_BIG_ENDIAN(SZARP_BIG_ENDIAN)

include_directories(${CMAKE_CURRENT_BINARY_DIR})
configure_file(config.h.in config.h)

add_subdirectory(libSzarp)
add_subdirectory(libSzarp2)
#add_subdirectory(python)
#add_subdirectory(sender)
#add_subdirectory(parcook)
#add_subdirectory(cfgdealer)
add_subdirectory(isl)
#add_subdirectory(meaner3)
#add_subdirectory(iks)
#add_subdirectory(extern)
#add_subdirectory(wx)
#add_subdirectory(utils)
#add_subdirectory(unit_tests)
#add_subdirectory(www)
#add_subdirectory(resources)
#add_subdirectory(script)
#add_subdirectory(qt4)
